<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.common.main.mapper.MainMapper">
	
	<!-- 상단에 표시할 회원 정보 가져오기 -->
	<select id="memInfoSelect" parameterType="String" resultType="kr.or.ddit.common.main.vo.MemberInfoVO">
		SELECT t.*, af.file_path
		FROM ( SELECT 
				    fn_get_univ_dept_name(p.UNIV_DEPT_NUM) prof_UNIV_DEPT_NUM  
				    , fn_get_univ_dept_name(s.UNIV_DEPT_NUM) std_UNIV_DEPT_NUM 
				    , s.RGST_SEM
				    , FN_GET_MEM_NAME(s.adv_prof) adv_prof
				    , fn_get_code_name('ACA_STA', s.ACAD_STAT_CODE) ACAD_STAT_CODE  
				    , fn_get_code_name('DEP_COD', e.dept_code) dept_code
				    , fn_get_code_name('JOB_COD', e.job_code) job_code
				    , m.FILE_GR_NUM 
				    , m.mem_id
				FROM 
				    member m
				LEFT JOIN professor p
				    ON m.mem_id = p.prof_id
				LEFT JOIN employee e
				    ON m.mem_id = e.emp_id
				LEFT JOIN student s
				    ON m.mem_id = s.std_id
				WHERE m.MEM_ID = #{memId}
				) t
				, attach_file af
		WHERE t.file_gr_num = af.file_gr_num(+)
	</select>
	
	<!-- 공지사항 리스트 가져오기 -->
	<select id="noticeSelect" parameterType="kr.or.ddit.common.main.vo.NoticeVO" resultType="kr.or.ddit.common.main.vo.NoticeVO">
		SELECT t.* 
			FROM (SELECT ROW_NUMBER() OVER (ORDER BY WRITE_DATE DESC) rnum
				    , EMP_ID
					, ARTC_NUM
					, TITLE
					, CONTENT
					, TO_CHAR(WRITE_DATE, 'yyyy-mm-dd') WRITE_DATE
					, FILE_GR_NUM
					, MOD_DATE
				FROM
				    GENERAL_NOTICE) t
			WHERE t.rnum BETWEEN #{firstIndex} AND #{lastIndex}
	</select>
	
	<!-- 주전공, 복수전공, 부전공, 교양 
			학과 이름과 강의 합계 학점 가져오기 -->
	<select id="getCourseCredit" parameterType="String" resultType="kr.or.ddit.common.main.vo.StdAcadInfoVO">
		SELECT tt.ct1 ct1_Univ_Dept_Num
				, FN_GET_UNIV_DEPT_NAME(tt.ct1) ct1_Univ_Dept_Name
				, sum(DECODE(tt.lect_univ_dept_num, tt.ct1, cnt, 0)) ct1_Cred
				, NVL(tt.ct2, '') ct2_Univ_Dept_Num
				, FN_GET_UNIV_DEPT_NAME(tt.ct2) ct2_Univ_Dept_Name
				, sum(DECODE(tt.lect_univ_dept_num, tt.ct2, cnt, 0)) ct2_Cred
				, NVL(tt.ct3, '') ct3_Univ_Dept_Num
				, FN_GET_UNIV_DEPT_NAME(tt.ct3) ct3_Univ_Dept_Name
				, sum(DECODE(tt.lect_univ_dept_num, tt.ct3, cnt, 0)) ct3_Cred
				, sum(DECODE(tt.lect_univ_dept_num, null, cnt, 0)) ct4_Cred
		FROM (
				SELECT a.*, b.UNIV_DEPT_NUM CT2, c.UNIV_DEPT_NUM CT3
				FROM 
				(
						SELECT t.lect_univ_dept_num 
								, SUM(t.cred) cnt 
								, t.UNIV_DEPT_NUM ct1
								, t.std_id
						FROM (
								SELECT s.STD_ID
										, rl.LECT_OPEN_NUM 
										, rl.LECT_UNIV_DEPT_NUM 
										, NVL(lo.CRED, 0) cred 
										, s.UNIV_DEPT_NUM 
								FROM REGISTRATION_LECTURE rl 
									, LECTURE_OPEN lo 
									, STUDENT s
								WHERE
									s.STD_ID = #{stdId}
								AND 
									s.STD_ID = rl.STD_ID (+) 
								AND 
									rl.LECT_OPEN_NUM = lo.LECT_OPEN_NUM (+) 
								AND 
									s.STD_ID = rl.STD_ID (+)
								) t
						GROUP BY t.lect_univ_dept_num, t.UNIV_DEPT_NUM, t.std_id
						) a
						,
						(SELECT cr.UNIV_DEPT_NUM, cr.STD_ID 
						FROM COURSE_RECODE cr 
						WHERE cr.std_id = #{stdId}
						AND cr.COURSE_TYPE_NUM = 'CT2') b
						,
						(SELECT cr.UNIV_DEPT_NUM, cr.STD_ID 
						FROM COURSE_RECODE cr 
						WHERE cr.std_id = #{stdId}
						AND cr.COURSE_TYPE_NUM = 'CT3') c
				WHERE a.std_id = b.std_id(+)
				AND 
					a.std_id = c.std_id(+)
				) tt
		GROUP BY tt.ct1, tt.ct2, tt.ct3
	</select>
	
	<!-- 학생의 졸업 학점 정보 -->
	<select id="getGrdtnCred" resultType="kr.or.ddit.common.main.vo.StdAcadInfoVO">
		SELECT sum(DECODE(COURSE_TYPE_NUM, 'CT1', GRDTN_COURSE_CRED, 0)) ct1_Grdtn_Cred
			 , sum(DECODE(COURSE_TYPE_NUM, 'CT2', GRDTN_COURSE_CRED, 0)) ct2_Grdtn_Cred
			 , sum(DECODE(COURSE_TYPE_NUM, 'CT3', GRDTN_COURSE_CRED, 0)) ct3_Grdtn_Cred
			 , sum(DECODE(COURSE_TYPE_NUM, 'CT4', GRDTN_COURSE_CRED, 0)) ct4_Grdtn_Cred
		FROM COURSE_TYPE
	</select>
	
	<!-- 학생의 학사 정보 카운트 -->
	<select id="stdAcadInfoCount" parameterType="String" resultType="kr.or.ddit.common.main.vo.JobCountVO">
		SELECT 
			(SELECT NVL(SUM(DECODE(to2.PROC_STAT_CODE, '01', 1)), 0) FROM TAKE_OFF to2 WHERE to2.STD_ID = #{stdId}) take_off_cnt01
			,(SELECT COUNT(to2.AUTH_DOC_NUM) FROM TAKE_OFF to2 WHERE to2.STD_ID = #{stdId}) take_off_cnt_total
			,(SELECT NVL(SUM(DECODE(r.PROC_STAT_CODE, '01', 1)), 0) FROM RETURN r WHERE r.STD_ID = #{stdId}) return_cnt01
			,(SELECT COUNT(r.AUTH_DOC_NUM) FROM RETURN r WHERE r.STD_ID = #{stdId}) return_cnt_total
			,(SELECT NVL(SUM(DECODE(r2.PROC_STAT_CODE, '01', 1)), 0) FROM readmission r2 WHERE r2.STD_ID = #{stdId}) readmission_cnt01
			,(SELECT COUNT(r2.AUTH_DOC_NUM) FROM readmission r2 WHERE r2.STD_ID = #{stdId}) readmission_cnt_total
			,(SELECT NVL(SUM(DECODE(e.PROC_STAT_CODE, '01', 1)), 0) FROM EXPULSION e WHERE e.STD_ID = #{stdId}) EXPULSION_cnt01
			,(SELECT COUNT(e.AUTH_DOC_NUM) FROM EXPULSION e WHERE e.STD_ID = #{stdId}) EXPULSION_cnt_total
			,(SELECT NVL(SUM(DECODE(c.PROC_STAT_CODE, '01', 1)), 0) FROM COURSE_CHANGE_APPLY c WHERE c.STD_ID = #{stdId}) COURSE_CHANGE_cnt01
			,(SELECT COUNT(c.AUTH_DOC_NUM) FROM COURSE_CHANGE_APPLY c WHERE c.STD_ID = #{stdId}) COURSE_CHANGE_cnt_total
			,(SELECT NVL(SUM(DECODE(tp.PAY_CODE, '01', 1)), 0) FROM TUITION_PAYMENT tp WHERE tp.STD_ID = #{stdId}) TUITION_PAYMENT_cnt01
			,(SELECT COUNT(*) FROM TUITION_PAYMENT tp WHERE tp.STD_ID = #{stdId}) TUITION_PAYMENT_cnt_total
		FROM dual
	</select>
	
	
	<!-- 오늘 예정된 교수의 상담 건수 -->
	<select id="consultCount" parameterType="String" resultType="kr.or.ddit.common.main.vo.JobCountVO">
		SELECT
			 NVL(SUM(DECODE(c.PROC_STAT_CODE, '01', 1, 0)), 0) consult_Cnt_01 
			 , count(c.CONSULT_NUM) consult_Cnt_All
		FROM
			CONSULT c
			, CONSULT_SCHEDULE cs 
		WHERE
			c.CONSULT_SCHDL_NUM = cs.CONSULT_SCHDL_NUM
			AND 
			cs.PROF_ID = #{memId}
			AND 
			TO_CHAR(cs.CONSULT_AVL_DATE, 'yyyy-mm-dd') = TO_CHAR(SYSDATE, 'yyyy-mm-dd')
	</select>
	
	<!-- 기안자 : 결재 기안 정보 카운트 
	-->
	<select id="authDocInfoCount" parameterType="String" resultType="kr.or.ddit.common.main.vo.JobCountVO">
		SELECT 
		      NVL(SUM(DECODE(AUTH_STAT_CODE, '01', 1, 0)), 0) AS auth_Doc_Cnt01
		    , NVL(SUM(DECODE(AUTH_STAT_CODE, '02', 1, 0)), 0) AS auth_Doc_Cnt02
		    , NVL(SUM(DECODE(AUTH_STAT_CODE, '03', 1, 0)), 0) AS auth_Doc_Cnt03
		    , NVL(SUM(DECODE(AUTH_STAT_CODE, '04', 1, 0)), 0) AS auth_Doc_Cnt04
		FROM
		    auth_document
		WHERE 
			mem_id = #{memId}
	</select>
	
	<!-- 결재자 : 결재 문서 정보 카운트 
	 -->
	<select id="authDocInfoCountForStep" parameterType="String" resultType="kr.or.ddit.common.main.vo.JobCountVO">
		SELECT 
	          NVL(SUM(DECODE(PROC_STAT_CODE, '01', 1, 0)), 0) AS auth_Doc_For_Step_Cnt01
		    , NVL(SUM(DECODE(PROC_STAT_CODE, '02', 1, 0)), 0) AS auth_Doc_For_Step_Cnt02
		    , NVL(SUM(DECODE(PROC_STAT_CODE, '03', 1, 0)), 0) AS auth_Doc_For_Step_Cnt03
		    , NVL(SUM(DECODE(PROC_STAT_CODE, '04', 1, 0)), 0) AS auth_Doc_For_Step_Cnt04
		FROM
		    auth_detail_info
		WHERE 
			mem_id = #{memId}
	</select>
	
	<!-- 결재가 필요한 기안 문서 번호 가져오기 -->
	<select id="authDocNumSelect" parameterType="String" resultType="String">
		SELECT
			AUTH_DOC_FORM_NUM
		FROM
			AUTH_DOCUMENT
		WHERE 
			AUTH_STAT_CODE = '01'
		AND 
			MEM_ID = #{memId}
	</select>

	<!-- 결재가 필요한 결재 문서 번호 가져오기 -->
	<select id="authDocNumForStepSelect" parameterType="String" resultType="String">
		SELECT
			AUTH_DOC_NUM
		FROM
			AUTH_DETAIL_INFO
		WHERE 
			PROC_STAT_CODE = '01'
		AND 
			MEM_ID = #{memId}
	</select>
	
	
	<!-- 교수의 시간표 : 특정학기에 개설한 lect_open_num 목록 가져오기 -->	
	<select id="profLectureSelect" parameterType="kr.or.ddit.student.registrationLecture.vo.LectureOpenVO" resultType="String">
		SELECT
		    lect_open_num
		FROM
		    lecture_open
		WHERE 
		  	prof_id = #{profId}
		  AND 
		  	year = #{year}
		  AND 
		  	sem_code = #{semCode}
	</select>
	
	<!-- 직원이 답변할 질문의 갯수 -->
	<select id="empQnaCnt" resultType="String">
		SELECT NVL(SUM(DECODE(REPLY_COMMENT, 0, 1)), 0) cnt
		FROM
		(
			SELECT
				ROW_NUMBER() OVER (ORDER BY TO_NUMBER(A.ARTC_NUM) DESC) RNUM
				, A.MEM_ID
				, A.ARTC_NUM
				, A.TITLE
				, COUNT(B.REPLY_COMMENT) AS REPLY_COMMENT
			FROM
				INQUIRY A
				, REPLY B
				, MEMBER C
			WHERE
					A.ARTC_NUM = B.ORI_NUM(+)
				AND A.MEM_ID = C.MEM_ID
			GROUP BY
					A.ARTC_NUM
				, A.MEM_ID
				, A.TITLE
				, A.WRITE_DATE
				, A.ANSWER
				, A.MOD_DATE
				, A.FILE_GR_NUM
				, C.NAME
		)
	</select>
	
</mapper>
