package kr.or.ddit.student.takeOff.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import kr.or.ddit.student.takeOff.service.TakeOffService;
import kr.or.ddit.student.takeOff.vo.TakeOffVO;
import kr.or.ddit.util.auth.controller.AuthDocController;
import kr.or.ddit.util.code.service.CodeService;
import kr.or.ddit.util.code.vo.CodeVO;
import kr.or.ddit.util.file.controller.FileController;
import kr.or.ddit.util.file.vo.AttachFileVO;

/**
 * 20210909 추후 구현할 기능
 * 1. 학생 정보 가져와 readonly로 뿌리기
 * 2. 학번으로 휴학 내역 조회해 휴학 가능한 학기 수 범위 조정하기
 * 3. 가능하다면 수정은 팝업으로 (ajax가 동작해야 함)
 * 4. 상단의 휴학 기간은 학사 일정을 기반으로 출력할 수도 있음
 * @author PC-08
 *
 */

@Controller
@RequestMapping("/student/takeOff/*")
public class TakeOffController {

	@Autowired
	FileController fileController; // 파일 처리 용 
	@Autowired
	CodeService codeService; // 공통 코드 처리 용
	@Autowired
	AuthDocController authController; // 결재 처리 용
	@Autowired
	TakeOffService takeOffService;
	
	Logger logger = LoggerFactory.getLogger(TakeOffController.class);
	
	// ** 신청 폼
	@RequestMapping(value = "/takeOffApply", method = RequestMethod.GET)
	public String insert(Model model) {
		List<CodeVO> codeList = codeService.codeList("TAK_OFF");
		model.addAttribute("codeList", codeList);
		return "student/takeOff/takeOffApply";
	}
	
	// ** 신청 폼 제출
	@RequestMapping(value = "/takeOffApply", method = RequestMethod.POST)
	public String insertPost(@ModelAttribute TakeOffVO takeOffVo, @RequestParam(value="fileCheck", required=false) String fileCheck) {
		
		// 파일이 들어 있을 때만 실행 : 파일이 없는데 fileGrNum이 들어가는 결함이 있음.
		String fileGrNum = "";
		if(fileCheck!=null) {
			fileGrNum = fileController.fileUpload(takeOffVo.getFileList());
			takeOffVo.setFileGrNum(fileGrNum);
		}
		
		// 신청 시 결재 문서 테이블에 insert 후 결재 문서 번호 받아 입력하기
		// 필요한 파라미터 1. 각 신청을 구분하는 번호 (봉사 : 06, 강의개설 : 07)
		// 필요한 파라미터 2. 파일 그룹 번호 (첨부파일이 없다면 [String fileGrNum = "";] 빈 값으로 입력) 
		String authDocNum = authController.authDocInsert("01", fileGrNum);
		takeOffVo.setAuthDocNum(authDocNum);
		
		takeOffService.takeOffApply(takeOffVo);
		return "redirect:/student/takeOff/takeOffApplyList";
	}

	// ** 리스트
	@RequestMapping(value = "/takeOffApplyList", method = RequestMethod.GET)
	public String list(@RequestParam(defaultValue = "1") String pageNo, Model model) {
		
		// 리스트 가져오기
		Map<String, Object> map = new HashMap<>();
		map.put("pageNo", pageNo);
		List<TakeOffVO> takeOffList = takeOffService.takeOffApplyList(map);
		model.addAttribute("takeOffList", takeOffList);

		//페이징 처리
		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(Integer.parseInt(pageNo));
		paginationInfo.setRecordCountPerPage(5);
		paginationInfo.setPageSize(5);
		paginationInfo.setTotalRecordCount(takeOffService.takeOffApplyTotalCount());
		model.addAttribute("paginationInfo", paginationInfo);

		return "student/takeOff/takeOffApplyList";
	}
	
	// ** 수정 폼
	@RequestMapping(value = "/takeOffApplyUpdate", method = RequestMethod.POST)
	public String update(@RequestParam String takeOffApplyNum, Model model) {
		
		List<CodeVO> codeList = codeService.codeList("TAK_OFF");
		model.addAttribute("codeList", codeList);
		
		TakeOffVO takeOffVo = takeOffService.takeOffApplyDetail(takeOffApplyNum);
		model.addAttribute("takeOffVo", takeOffVo);
		
		if(takeOffVo.getFileGrNum() != null) { // 파일이 들어 있을 경우
			List<AttachFileVO> fileList = fileController.fileList(takeOffVo.getFileGrNum());
			model.addAttribute("fileList", fileList);
		}
		
//		return "student/takeOff/popUp/takeOffApplyUpdatePopup";
		return "student/takeOff/takeOffApplyUpdate";
	}
	
	// ** 수정 폼 제출
	@RequestMapping(value = "/takeOffApplyUpdateSubmit", method = RequestMethod.POST)
	public String updateSubmit(@ModelAttribute TakeOffVO takeOffVo, @RequestParam(value="fileCheck", required=false) String fileCheck) {

		// 파일이 들어 있을 때만 파일 업로드 재실행 : 파일이 없는데 fileGrNum이 들어가는 결함이 있음. 
		if(fileCheck!=null) {
			String fileGrNum = fileController.fileUpload(takeOffVo.getFileList());
			takeOffVo.setFileGrNum(fileGrNum);
		}

		takeOffService.takeOffApplyUpdate(takeOffVo);
		return "redirect:/student/takeOff/takeOffApplyList";
	}
	
	//** 삭제
	@RequestMapping(value = "takeOffApplyDelete", method = RequestMethod.POST)
	public String delete(@RequestParam String takeOffApplyNum) {
		// proc_stat_code를 04(취소)로 update해도 되지만, 취소 내역을 복원하지도 않을 테니 그냥 지워도 될 것 같음.
		System.out.println("delete tan: " + takeOffApplyNum);
		takeOffService.takeOffApplyDelete(takeOffApplyNum);
		return "redirect:/student/takeOff/takeOffApplyList";
	}

}
