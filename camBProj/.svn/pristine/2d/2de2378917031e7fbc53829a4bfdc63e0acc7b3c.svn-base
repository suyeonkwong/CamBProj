package kr.or.ddit.util.auth.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import kr.or.ddit.util.auth.service.AuthService;
import kr.or.ddit.util.auth.vo.AuthDocVO;
import kr.or.ddit.util.auth.vo.AuthLineStepVO;

@Controller
public class AuthDocController {
	
	@Autowired
	AuthService authService;
	
	// 테스트 용
	@RequestMapping("/auth")
	String auth() {
		return "auth/authDocForm/takeOff";
	}
	
	/**
	 * 결재가 필요한 신청의 데이터를 insert할 때 필요한 결재 문서 번호를 생성한다.
	 * @param authDocFormNum : 신청 유형 구분하는 결재 문서 양식 번호를 파라미터로 입력한다. -> 결재 선의 authLineTypeCode
	 * @param fileGrNum : 파일 그룹 번호
	 * 			 			- 파일이 첨부되지 않은 경우에는 ("") 빈 값을 입력한다.   
	 * @return authDocNum : 신청을 결재에 올리는 결재 문서 번호
	 */
	public String authDocInsert(String authDocFormNum, String fileGrNum) {
		String authDocNum = authService.authDocInsert(authDocFormNum, fileGrNum);
		return authDocNum;
	}
	
	/**
	 * 담당 교직원에게 결재 리스트를 보여준다.
	 * 회원 아이디는 session에서 꺼내 오고, 
	 * pageNo, 검색 관련 파라미터는 AuthDocVO에서 꺼내오기
	 */
	@RequestMapping(value = "/auth/authDocList")
	public String authDocList(@ModelAttribute AuthDocVO authDocVo 
							, Model model) { 
		
		// ** 세션에서 memId꺼내 vo에 넣는 작업 필요
		authDocVo.setMemId("210301001");
		
		// 리스트 가져오기
		List<AuthDocVO> authDocList = authService.authDocList(authDocVo);
		model.addAttribute("authDocList", authDocList);
		
		// 페이징 처리
		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(authDocVo.getPageNo());
		paginationInfo.setRecordCountPerPage(5);
		paginationInfo.setPageSize(5);
		paginationInfo.setTotalRecordCount(authService.authDocTotalCount(authDocVo));
		model.addAttribute("paginationInfo", paginationInfo);
		
		return "auth/authDoc/authDocList";
	}
	
	/**
	 * 결재 리스트에서 한 건을 클릭하면 승인/미승인 할 수 있는 상세 페이지를 보여준다.
	 */
	@RequestMapping(value = "/auth/authDocDetail")
	public String authDocDetail(@RequestParam String authDocNum, Model model) {
		// 결재 문서 정보
		AuthDocVO authDocVo = authService.authDocDetail(authDocNum);
		model.addAttribute("authDocVo", authDocVo);
		
		// 결재 선 정보 (결재 선 정보가 없으면 건너 뜀) 
		if(authDocVo.getAuthLineNum()==null) {
			return "auth/authDoc/authDocDetail";
		}
		AuthLineStepVO authLineStepVo = new AuthLineStepVO();
		authLineStepVo.setSearchCondition("authLineNum");
		authLineStepVo.setSearchKeyword(authDocVo.getAuthLineNum());
		List<AuthLineStepVO> authLineList = authService.authLineList(authLineStepVo);
		model.addAttribute("authLineList", authLineList);
		
		return "auth/authDoc/authDocDetail";
	}
	
	/**
	 * 결재선 고르기
	 */
	@RequestMapping(value = "/auth/authLineSearchPopup")
	public String authLineSearch(@ModelAttribute AuthLineStepVO authLineStepVo
							   , Model model) {
		List<AuthLineStepVO> authLineStepVoList = authService.authLineList(authLineStepVo);
		model.addAttribute("authLineStepVoList", authLineStepVoList);
		return "auth/authDoc/popup/authLineSearchPopup";
	}
	
	
	/**
	 * 결재자가 기안을 올리기
	 * @param authDocVo
	 * @return
	 */
	@RequestMapping(value = "/auth/authDocUpdate")
	public String authDocUpdate(@ModelAttribute AuthDocVO authDocVo) {
		authService.authDocUpdateAndAuthDetailInfoInsert(authDocVo);
		return "forward:/auth/authDocList";
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
}
