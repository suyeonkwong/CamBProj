package kr.or.ddit.student.registrationLecture.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.common.login.vo.MemberVO;
import kr.or.ddit.student.registrationLecture.service.RegistrationLectureService;
import kr.or.ddit.student.registrationLecture.vo.CartVO;
import kr.or.ddit.student.registrationLecture.vo.LectureOpenAndSyllabusVO;
import kr.or.ddit.student.registrationLecture.vo.LectureOpenVO;
import kr.or.ddit.util.code.service.CodeService;
import kr.or.ddit.util.code.vo.CodeVO;

/**
 * 09/29 
 * - 학생 성적에 따라 신청 가능한 학점 상향, 하향해야 함 
 * @author PC-08
 */
@Controller
public class RegistrationLectureController {
	
	@Autowired
	RegistrationLectureService registrationLectureService;
	@Autowired
	CodeService codeService; // 공통 코드 처리 용
	
	private static final Logger LOGGER = LoggerFactory.getLogger(RegistrationLectureController.class);
	
	/**
	 * 수강 신청 할 수 있는 강의 목록
	 * - 장바구니, 신청 완료 강의 목록도 약식으로 보여줌 (페이징 처리 X)
	 * @throws Exception 
	 */
	@RequestMapping("/student/registrationLectureL/lectureOpenList")
	public String lectureOpenList(LectureOpenVO lectureOpenVo
								, HttpSession session
								, Model model) throws Exception {
		
		// 사용자 정보 (신청 가능한 학점 / 신청 가능한 학점)
		MemberVO memberVo = (MemberVO) session.getAttribute("memberVo");
		lectureOpenVo.setStdId(memberVo.getMemId());
		int credSum = registrationLectureService.registrationLectureCredSum(lectureOpenVo);
		int credAvail = 21; // 학생의 성적에 따라 상향, 하향할 수 있는 메서드 만들기
		model.addAttribute("credSum", credSum);
		model.addAttribute("credAvail", credAvail);
		
		// 검색 조건 다시 보내기
		model.addAttribute("lectureOpenVo", lectureOpenVo);
		
		// 강의 목록 & 항목 수 & 페이징 객체
		Map<String, Object> listAndCount = registrationLectureService.lectureOpenSelect(lectureOpenVo);
		model.addAttribute("lectureOpenListCount", listAndCount.get("count"));
		model.addAttribute("lectureOpenList", listAndCount.get("list"));
		model.addAttribute("paginationInfo", registrationLectureService.getPaginationInfo(lectureOpenVo));

		// 약식 장바구니 & 신청 완료 강의 목록 (페이징 처리 X) & 각 항목 수 (stdId, notPaging 값만 있어야 됨)
		lectureOpenVo = new LectureOpenVO();
		lectureOpenVo.setStdId(memberVo.getMemId());
		lectureOpenVo.setNotPaging(true);
		listAndCount = registrationLectureService.cartLectOpenNumSelect(lectureOpenVo);
		model.addAttribute("cartCount", listAndCount.get("count"));
		model.addAttribute("cartList", listAndCount.get("list"));
		
		listAndCount = registrationLectureService.registrationLectureLectOpenNumSelect(lectureOpenVo);
		model.addAttribute("registrationLectureCount", listAndCount.get("count"));
		model.addAttribute("registrationLectureList", listAndCount.get("list"));
		
		// 교과 구분 코드 SUBJ_TYPE_CODE
		List<CodeVO> codeList = codeService.codeList("SUB_TYP");
		model.addAttribute("codeList", codeList);
		return "student/registrationLecture/lectureOpenList";
	}
	
	/**
	 * ajax : 모달 창에 뿌릴 강의 계획서 데이터 주기 (교수의 이메일, 연락처 추가)
	 * @throws Exception 
	 */
	@ResponseBody
	@RequestMapping(value = "/student/registrationLecture/getSyllabus", produces = "application/json; charset=utf8")
	public LectureOpenAndSyllabusVO getSyllabus(@RequestBody LectureOpenVO lectureOpenVo) throws Exception {
		System.out.println("ajax param : " + lectureOpenVo.toString());
		Map<String, Object> listAndCount = registrationLectureService.lectureOpenSelect(lectureOpenVo);
		List<LectureOpenAndSyllabusVO> list = (List<LectureOpenAndSyllabusVO>) listAndCount.get("list");
		System.out.println("ajax list : " + list);
		return list.get(0);
	}
	
	/**
	 * 장바구니에 담은 강의 목록
	 */
	@RequestMapping("/student/registrationLectureC/cartList")
	public String cartList(LectureOpenVO lectureOpenVo) {
		return "student/registrationLecture/cartList";
	}
	
	/**
	 * 장바구니 담기
	 * @throws Exception 
	 */
	@RequestMapping("/student/registrationLecture/cartInsert")
	public String cartInsert(LectureOpenVO lectureOpenVo, HttpSession session, Model model) throws Exception {
		CartVO cartVo = new CartVO();
		MemberVO memberVo = (MemberVO) session.getAttribute("memberVo");
		cartVo.setStdId(memberVo.getMemId());
		cartVo.setLectOpenNum(lectureOpenVo.getLectOpenNum());
		
		registrationLectureService.cartInsert(cartVo);
		
		//lectureOpenVo에 담긴 파라미터 지워주기 
		lectureOpenVo.setLectOpenNum("");
		return lectureOpenList(lectureOpenVo, session, model);
	}
	
	/**
	 * 장바구니에서 삭제하기 
	 * @throws Exception 
	 */
	@RequestMapping("/student/registrationLecture/cartDelete")
	public String cartDelete(LectureOpenVO lectureOpenVo, HttpSession session, Model model) throws Exception {
		CartVO cartVo = new CartVO();
		MemberVO memberVo = (MemberVO) session.getAttribute("memberVo");
		cartVo.setStdId(memberVo.getMemId());
		cartVo.setLectOpenNum(lectureOpenVo.getLectOpenNum());
		registrationLectureService.cartDelete(cartVo);
		
		//lectureOpenVo에 담긴 파라미터 지워주기 -- 안됨 파라미터로 받았던 게 그대로 감
		lectureOpenVo.setLectOpenNum("");
		return lectureOpenList(lectureOpenVo, session, model);
	}
	
	/**
	 * 수강 신청하기
	 */
	@RequestMapping("/student/registrationLecture/registrationLectureInsert")
	public String registrationLectureInsert(LectureOpenVO lectureOpenVo) {
		return "forward:/student/registrationLectureL/lectureOpenList";
	}
	
	/**
	 * 신청 완료한 강의 목록
	 */
	@RequestMapping("/student/registrationLectureR/registrationLectureList")
	public String registrationLectureList() {
		return "student/registrationLecture/registrationLectureList";
	}
	
	
}
