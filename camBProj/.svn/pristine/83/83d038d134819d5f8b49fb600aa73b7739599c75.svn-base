package kr.or.ddit.student.registrationLecture.service.impl;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import kr.or.ddit.student.registrationLecture.mapper.RegistrationLectureMapper;
import kr.or.ddit.student.registrationLecture.service.RegistrationLectureService;
import kr.or.ddit.student.registrationLecture.vo.CartVO;
import kr.or.ddit.student.registrationLecture.vo.LectureOpenVO;

@Service
public class RegistrationLectureServiceImpl implements RegistrationLectureService {
	
	@Autowired
	RegistrationLectureMapper registrationLectureMapper;
	
	/**
	 * 학생의 신청 가능한 학점 가져오기
	 * 학사 경고 : 이전 학기 성적 평점 평균이 1.7 미달이거나, 3개 과목 이상 또는 6학점 이상 F인 자는 3점 하향. 
	 */
	
	
	/**
	 * 현재 수강 신청한 학점 합계
	 */
	@Override
	public int registrationLectureCredSum(LectureOpenVO lectureOpenVo) throws Exception {
		// year, semCode을 현재 날짜에 기반해 계산
		Map<String, String> yearSemCode = getYearSemCode();
		lectureOpenVo.setYear(yearSemCode.get("year"));
		lectureOpenVo.setSemCode(yearSemCode.get("semCode"));
		
		return registrationLectureMapper.registrationLectureCredSum(lectureOpenVo);
	}
	
	/**
	 * 장바구니에 담긴 강의 목록을 가져온다.
	 * @param lectureOpenVo : stdId, year, semCode 
	 * @return Map<String, Object> listAndCount : List<LectureOpenAndSyllabusVO> 장바구니에 담긴 강의 목록 & int 강의 수
	 */
	@Override
	public Map<String, Object> cartLectOpenNumSelect(LectureOpenVO lectureOpenVo) throws Exception{
		// year, semCode을 현재 날짜에 기반해 계산
		Map<String, String> yearSemCode = getYearSemCode();
		lectureOpenVo.setYear(yearSemCode.get("year"));
		lectureOpenVo.setSemCode(yearSemCode.get("semCode"));
		// lectOpenNumList를 lectureOpenVo로 옮기기
		String[] lectOpenNumList = registrationLectureMapper.cartLectOpenNumSelect(lectureOpenVo);
		// lectOpenNumList의 길이가 0보다 길면 LectureOpenSelect 메서드 호출
		Map<String, Object> listAndCount = new HashMap<>();
		listAndCount.put("count", 0);
		listAndCount.put("list", "[]");
		lectureOpenVo.setLectOpenNumList(lectOpenNumList);
		if(lectOpenNumList.length > 0) {
			listAndCount = lectureOpenSelect(lectureOpenVo);
		}
		return listAndCount;
	}
	
	/**
	 * 수강신청 완료한 강의 목록을 가져온다.
	 * @param lectureOpenVo : stdId, year, semCode 
	 * @return Map<String, Object> listAndCount : List<LectureOpenAndSyllabusVO> 수강신청 완료한 강의 목록 & int 강의 수
	 */
	@Override
	public Map<String, Object> registrationLectureLectOpenNumSelect(LectureOpenVO lectureOpenVo) throws Exception{
		// year, semCode을 현재 날짜에 기반해 계산
		Map<String, String> yearSemCode = getYearSemCode();
		lectureOpenVo.setYear(yearSemCode.get("year"));
		lectureOpenVo.setSemCode(yearSemCode.get("semCode"));
		// lectOpenNumList를 lectureOpenVo로 옮기기
		String[] lectOpenNumList = registrationLectureMapper.registrationLectureLectOpenNumSelect(lectureOpenVo);
		// LectureOpenSelect 메서드 호출
		Map<String, Object> listAndCount = new HashMap<>();
		listAndCount.put("count", 0);
		listAndCount.put("list", "[]");
		lectureOpenVo.setLectOpenNumList(lectOpenNumList);
		if(lectOpenNumList.length > 0) {
			listAndCount  = lectureOpenSelect(lectureOpenVo);
		}
		return listAndCount;
	}
	
	/**
	 * 조건에 맞는 강의 목록과 강의의 수를 가져온다.
	 * (수강신청 가능 강의 / 장바구니에 담은 강의 / 수강 신청 완료 강의)
	 * @param lectureOpenVo : pageNo, year, semCode는 필수
	 * @return Map<String, Object> listAndCount : List<LectureOpenAndSyllabusVO> 조건에 맞는 강의 목록 & int 강의 수
	 */
	@Override
	public Map<String, Object> lectureOpenSelect(LectureOpenVO lectureOpenVo) throws Exception{
		// year, semCode을 현재 날짜에 기반해 계산
		Map<String, String> yearSemCode = getYearSemCode();
		lectureOpenVo.setYear(yearSemCode.get("year"));
		lectureOpenVo.setSemCode(yearSemCode.get("semCode"));
		
		// 페이징 처리
		PaginationInfo paginationInfo = getPaginationInfo(lectureOpenVo);
		lectureOpenVo.setFirstIndex(paginationInfo.getFirstRecordIndex()+1);
		lectureOpenVo.setLastIndex(paginationInfo.getLastRecordIndex()); // 약식 장바구니, 신청 완료 페이지는 lectureOpenCount(lectureOpenVo)
		
		int totalCnt = registrationLectureMapper.lectureOpenCount(lectureOpenVo);
		
		// 약식 장바구니, 신청 완료 페이지는 페이징 처리 X -> lastRecodeIndex가 모든 항목 수
		if(lectureOpenVo.isNotPaging()) {
			lectureOpenVo.setLastIndex(totalCnt); 
		}
		
		Map<String, Object> listAndCount = new HashMap<>();
		listAndCount.put("list", registrationLectureMapper.lectureOpenSelect(lectureOpenVo));
		listAndCount.put("count", totalCnt);
		return listAndCount;
	}
	
	/**
	 * 날짜를 기반으로 year, semcode 구하기
	 */
	public Map<String, String> getYearSemCode() {
		Map<String, String> map = new HashMap<>();
		
		LocalDate now = LocalDate.now();
		map.put("year", String.valueOf(now.getYear()));
		
		int month = now.getMonthValue();
		// 정규 학기만 계산 - 1(3) ~ 6월 : 1학기 / 7(9) ~ 12월 : 2학기
		String semCode = month < 7 ? "1" : "2";
		map.put("semCode", semCode);
		
		return map;
	}
	
	/**
	 * pageNo가 저장된 lectureOpenVo로 페이징 처리 객체 가져오기
	 */
	@Override
	public PaginationInfo getPaginationInfo(LectureOpenVO lectureOpenVo) throws Exception{
		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(lectureOpenVo.getPageNo());
		paginationInfo.setRecordCountPerPage(5);
		paginationInfo.setPageSize(5);
		paginationInfo.setTotalRecordCount(registrationLectureMapper.lectureOpenCount(lectureOpenVo));
		return paginationInfo;
	}
	
	
	/**
	 * 장바구니에 넣기
	 */
	@Override
	public void cartInsert(CartVO cartVo) throws Exception{
		// year, semCode을 현재 날짜에 기반해 계산
		Map<String, String> yearSemCode = getYearSemCode();
		cartVo.setYear(yearSemCode.get("year"));
		cartVo.setSemCode(yearSemCode.get("semCode"));
		
		registrationLectureMapper.cartInsert(cartVo);
	}
	
	/**
	 * 장바구니에서 삭제하기
	 */
	@Override
	public void cartDelete(CartVO cartVo) throws Exception{
		registrationLectureMapper.cartDelete(cartVo);
	}
	
}
