package kr.or.ddit.student.takeOff.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import kr.or.ddit.student.takeOff.service.TakeOffService;
import kr.or.ddit.student.takeOff.vo.TakeOffVO;
import kr.or.ddit.util.code.service.CodeService;
import kr.or.ddit.util.code.vo.CodeVO;
import kr.or.ddit.util.file.controller.FileController;

@Controller
@RequestMapping("/student/takeOff/*")
public class TakeOffController {

	@Autowired
	FileController fileController; // 파일 처리 용 
	@Autowired
	CodeService codeService; // 공통 코드 처리 용
	@Autowired
	TakeOffService takeOffService;
	
	Logger logger = LoggerFactory.getLogger(TakeOffController.class);
	
	// ** 신청 폼
	@RequestMapping(value = "/takeOffApply", method = RequestMethod.GET)
	public String insert(Model model) {
		List<CodeVO> codeList = codeService.codeList("TAK_OFF");
		model.addAttribute("codeList", codeList);
		return "student/takeOff/insert";
	}
	
	// ** 신청 폼 제출
	@RequestMapping(value = "/takeOffApply", method = RequestMethod.POST)
	public String insertPost(@ModelAttribute TakeOffVO takeOffVo, @RequestParam(value="fileCheck", required=false) String fileCheck) {
		
		// 파일이 들어 있을 때만 실행 : 파일이 없는데 fileGrNum이 들어가는 결함이 있음. 
		if(fileCheck!=null) {
			String fileGrNum = fileController.fileUpload(takeOffVo.getFileList());
			takeOffVo.setFileGrNum(fileGrNum);
		}
		
		takeOffService.apply(takeOffVo);
		return "redirect:/student/takeOff/takeOffApplyDetail";
	}

	// ** 리스트
	@RequestMapping(value = "/takeOffApplyDetail", method = RequestMethod.GET)
	public String list(@RequestParam(defaultValue = "1") String pageNo, Model model) {
		
		// 리스트 가져오기
		Map<String, Object> map = new HashMap<>();
		map.put("pageNo", pageNo);
		List<TakeOffVO> takeOffList = takeOffService.list(map);
		model.addAttribute("takeOffList", takeOffList);

		//페이징 처리
		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(Integer.parseInt(pageNo));
		paginationInfo.setRecordCountPerPage(5);
		paginationInfo.setPageSize(5);
		paginationInfo.setTotalRecordCount(takeOffService.totalCount());
		model.addAttribute("paginationInfo", paginationInfo);

		return "student/takeOff/list";
	}
	
	// ** 수정 폼
	@RequestMapping(value = "/takeOffApplyUpdate", method = RequestMethod.GET)
	public String update(@RequestParam String takeOffApplyNum, Model model) {
		
		List<CodeVO> codeList = codeService.codeList("TAK_OFF");
		model.addAttribute("codeList", codeList);
		
		TakeOffVO takeOffVo = takeOffService.detail(takeOffApplyNum);
		model.addAttribute("takeOffVo", takeOffVo);
		
		System.out.println(">>> takeOffApplyUpdate TakeOffVO : " + takeOffVo);
		return "student/takeOff/popUp/update";
	}
	
	// ** 수정 폼 제출
	@RequestMapping(value = "/takeOffApplyUpdate", method = RequestMethod.POST)
	public String updatePost(@ModelAttribute TakeOffVO takeOffVo, @RequestParam(value="fileCheck", required=false) String fileCheck) {
		
		// 파일이 들어 있을 때만 실행 : 파일이 없는데 fileGrNum이 들어가는 결함이 있음. 
		if(fileCheck!=null) {
			String fileGrNum = fileController.fileUpload(takeOffVo.getFileList());
			takeOffVo.setFileGrNum(fileGrNum);
		}
		
		takeOffService.update(takeOffVo);
		return "student/takeOff/takeOffApplyDetail";
	}

}
