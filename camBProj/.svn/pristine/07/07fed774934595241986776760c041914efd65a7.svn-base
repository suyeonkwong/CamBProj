<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.professor.lecture.mapper.LectureMapper">
	<select id="selectLectureList" parameterType="hashMap" resultType="lectureOpenVO">
		SELECT T.*
		FROM
		(
		SELECT ROWNUM RNUM,
		PROF_ID, SUBJ_NUM, LECT_OPEN_NUM, LECT_NAME, FN_GET_CODE_NAME('SEM_COD',SEM_CODE) SEM_CODE, CRED, ROOM_NUM, SYL_NUM, FN_GET_CODE_NAME('SUB_TYP',SUBJ_TYPE_CODE) SUBJ_TYPE_CODE, YEAR, UNIV_DEPT_NUM, DIVIDE_NUM, MAX_STD_CNT, STD_CNT, CLOSE_YN, OPEN_YN, APPLY_DATE,FN_GET_CODE_NAME('PRO_STA',PROC_STAT_CODE) PROC_STAT_CODE, DISAUTH_RSN, AUTH_DOC_NUM,
		LECT_TIME
		FROM   
        (SELECT CONCAT(B.BUILD_CODE,B.ROOM_NUM) ROOM_NUM,A.*, FN_GET_LECT_TIME(LECT_OPEN_NUM) LECT_TIME
        FROM LECTURE_OPEN A, LECTURE_ROOM B
        WHERE A.ROOM_IDN_NUM = B.ROOM_IDN_NUM
        order by TO_NUMBER(LECT_OPEN_NUM) DESC,year desc,DECODE(sem_code ,  'W', 1,  '2', 2,  'S', 3,  4)
        )ROOM_NUM
		WHERE 1 = 1
				<if test="selectYear !='' and selectSemester =='' and searchKeyword ==''">  <!-- selectYear가 선택 -->
					AND YEAR LIKE '%' || #{selectYear} || '%'
				</if>
				<if test="selectSemester !='' and selectYear =='' and searchKeyword ==''">
					AND SEM_CODE LIKE '%' || #{selectSemester} || '%'
				</if>
				<if test="searchKeyword !='' and selectSemester =='' and selectYear ==''" >
					AND LECT_NAME LIKE '%' || #{searchKeyword} || '%'
				</if>
				<if test="selectYear !='' and selectSemester != '' and searchKeyword ==''"> <!-- 년도,학기 -->
					AND YEAR LIKE '%' || #{selectYear} || '%'
					AND SEM_CODE LIKE '%' || #{selectSemester} || '%'
				</if>
				<if test="selectYear !='' and searchKeyword != '' and selectSemester ==''"> <!-- 년도, 이름 -->
					AND YEAR LIKE '%' || #{selectYear} || '%'
					AND LECT_NAME LIKE '%' || #{searchKeyword} || '%'
				</if>
				<if test="selectSemester !='' and searchKeyword != '' and selectYear ==''"> <!-- 학기, 이름 -->
					AND LECT_NAME LIKE '%' || #{searchKeyword} || '%'
					AND SEM_CODE LIKE '%' || #{selectSemester} || '%'
				</if>		
				<if test="searchKeyword !='' and selectSemester !='' and selectYear !=''" >
					AND LECT_NAME LIKE '%' || #{searchKeyword} || '%'
					AND YEAR LIKE '%' || #{selectYear} || '%'
					AND SEM_CODE LIKE '%' || #{selectSemester} || '%'
				</if>
		order by TO_NUMBER(LECT_OPEN_NUM) DESC,year desc,DECODE(sem_code ,  'W', 1,  '2', 2,  'S', 3,  4)
		) T
		WHERE T.RNUM BETWEEN (#{pageNo} * 5 - 4) AND (#{pageNo} * 5)
		
		
	</select>


	<!-- 페이지 갯수 -->
	<select id="selectCount" parameterType="hashMap" resultType="int">
	SELECT COUNT(*)
	FROM
	(
	SELECT T.*
		FROM
		(
		SELECT ROW_NUMBER() OVER (ORDER BY LECT_OPEN_NUM DESC) RNUM,
		PROF_ID, SUBJ_NUM, LECT_OPEN_NUM, LECT_NAME, SEM_CODE, CRED, ROOM_NUM, SYL_NUM, SUBJ_TYPE_CODE, YEAR, UNIV_DEPT_NUM, DIVIDE_NUM, MAX_STD_CNT, STD_CNT, CLOSE_YN, OPEN_YN, APPLY_DATE, PROC_STAT_CODE, DISAUTH_RSN, AUTH_DOC_NUM,
		CONCAT(CONCAT(LECT_TIME1,','), LECT_TIME2) LECT_TIME
		FROM   
        (SELECT CONCAT(B.BUILD_CODE,B.ROOM_NUM) ROOM_NUM,A.*
        FROM LECTURE_OPEN A, LECTURE_ROOM B
        WHERE A.ROOM_IDN_NUM = B.ROOM_IDN_NUM)ROOM_NUM
		WHERE 1 = 1
				<if test="selectYear !='' and selectSemester =='' and searchKeyword ==''">
					AND YEAR LIKE '%' || #{selectYear} || '%'
				</if>
				<if test="selectSemester !='' and selectYear =='' and searchKeyword ==''">
					AND SEM_CODE LIKE '%' || #{selectSemester} || '%'
				</if>
				<if test="searchKeyword !='' and selectSemester =='' and selectYear ==''" >
					AND LECT_NAME LIKE '%' || #{searchKeyword} || '%'
				</if>
				<if test="selectYear !='' and selectSemester != '' and searchKeyword ==''"> <!-- 년도,학기 -->
					AND YEAR LIKE '%' || #{selectYear} || '%'
					AND SEM_CODE LIKE '%' || #{selectSemester} || '%'
				</if>
				<if test="selectYear !='' and searchKeyword != '' and selectSemester ==''"> <!-- 년도, 이름 -->
					AND YEAR LIKE '%' || #{selectYear} || '%'
					AND LECT_NAME LIKE '%' || #{searchKeyword} || '%'
				</if>
				<if test="selectSemester !='' and searchKeyword != '' and selectYear ==''"> <!-- 학기, 이름 -->
					AND LECT_NAME LIKE '%' || #{searchKeyword} || '%'
					AND SEM_CODE LIKE '%' || #{selectSemester} || '%'
				</if>		
				<if test="searchKeyword !='' and selectSemester !='' and selectYear !=''" >
					AND LECT_NAME LIKE '%' || #{searchKeyword} || '%'
					AND YEAR LIKE '%' || #{selectYear} || '%'
					AND SEM_CODE LIKE '%' || #{selectSemester} || '%'
				</if>
		) T)
<!-- 		SELECT COUNT(*) -->
<!-- 		FROM LECTURE_OPEN -->
	</select>


	<select id="searchLectRoom" parameterType="kr.or.ddit.professor.lecture.vo.LectureRoomVO" resultType="kr.or.ddit.professor.lecture.vo.LectureRoomVO">
		SELECT ROOM_IDN_NUM, SEAT_CNT, ROOM_NUM, ROOM_NAME, BUILD_CODE, CONCAT(BUILD_CODE,ROOM_NUM) ROOM_NUM2
        FROM LECTURE_ROOM        
        WHERE 1 = 1
        <if test="roomNum !='' and buildCode ==''">
        	AND ROOM_NUM LIKE #{roomNum} || '%'
        </if>
        <if test="buildCode !='' and roomNum ==''">
        	AND BUILD_CODE LIKE '%' || #{buildCode} || '%'
        </if>
        <if test="roomNum !='' and buildCode !=''">
        	AND BUILD_CODE LIKE '%' || #{buildCode} || '%'
        	AND ROOM_NUM LIKE #{roomNum} || '%'
        </if>
        ORDER BY ROOM_NUM2
	</select>
	
	<select id="detailLectureOpen" parameterType="String" resultType="kr.or.ddit.professor.lecture.vo.LectureOpenVO">
			SELECT T.*
			FROM
			(
				SELECT 
				FN_GET_MEM_NAME(PROF_ID) PROF_ID,SUBJ_NUM, LECT_OPEN_NUM, LECT_NAME, FN_GET_CODE_NAME('SEM_COD',SEM_CODE) SEM_CODE, CRED, ROOM_NUM, SYL_NUM, FN_GET_CODE_NAME('SUB_TYP',SUBJ_TYPE_CODE) SUBJ_TYPE_CODE, YEAR, FN_GET_UNIV_DEPT_NAME(UNIV_DEPT_NUM) UNIV_DEPT_NUM, DIVIDE_NUM, MAX_STD_CNT, STD_CNT, CLOSE_YN, OPEN_YN, TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') APPLY_DATE, FN_GET_CODE_NAME('PRO_STA',PROC_STAT_CODE) PROC_STAT_CODE, DISAUTH_RSN, AUTH_DOC_NUM,
				FN_GET_LECT_TIME(LECT_OPEN_NUM) LECT_TIME
				FROM   
		        (SELECT CONCAT(B.BUILD_CODE,B.ROOM_NUM) ROOM_NUM,A.*,FN_GET_LECT_TIME(A.LECT_OPEN_NUM) LECT_TIME
		        FROM LECTURE_OPEN A, LECTURE_ROOM B, PROFESSOR C
		        WHERE A.ROOM_IDN_NUM = B.ROOM_IDN_NUM
	            AND A.PROF_ID = C.PROF_ID) 
				WHERE LECT_OPEN_NUM = #{lectOpenNum}
	    	) T
       
	</select>
	
	<select id="searchDeptName" parameterType="String" resultType="kr.or.ddit.professor.lecture.vo.LectureOpenVO">
		SELECT
		    FN_GET_UNIV_DEPT_NAME(UNIV_DEPT_NUM)  UNIV_DEPT_NAME,
		    UNIV_DEPT_NUM,
		    FN_GET_MEM_NAME(PROF_ID) PROF_NM,
		    PROF_ID
		FROM
		    PROFESSOR
		WHERE
		    PROF_ID = #{memId}
	</select>
	
	
	
	<update id="updateLecture" parameterType="kr.or.ddit.professor.lecture.vo.LectureOpenVO">
	        
		UPDATE lecture_open
		SET
		   divide_num = #{divideNum}
		   ,ROOM_IDN_NUM = (SELECT ROOM_IDN_NUM FROM LECTURE_ROOM WHERE CONCAT(BUILD_CODE,ROOM_NUM) = #{roomIdnNum})
		   ,max_std_cnt = #{maxStdCnt}
		   ,lect_time1 = #{lectTime1}
           ,lect_time2 = #{lectTime2} 
		WHERE
            LECT_OPEN_NUM = #{lectOpenNum}
      
	</update>
	
	<delete id="deleteLectureOpen" parameterType="String">
		DELETE FROM LECTURE_OPEN
		WHERE  LECT_OPEN_NUM = #{lectOpenNum}
	</delete>
	
	<select id="detailSyllabus" parameterType="String" resultType="kr.or.ddit.professor.lecture.vo.SyllabusVO">
		SELECT B.*, C.*
		FROM LECTURE_OPEN A,SYLLABUS B, MEMBER C
		WHERE A.SYL_NUM = B.SYL_NUM
		AND A.PROF_ID = C.MEM_ID
		AND A.LECT_OPEN_NUM = #{lectOpenNum}

	</select>
	
	<update id="updateSyllabus" parameterType="kr.or.ddit.professor.lecture.vo.SyllabusVO">
		UPDATE SYLLABUS
    SET
       LECT_OVR = #{lectOvr}
	   ,LECT_GOAL = #{lectGoal}
	   ,LECT_METHOD = #{lectMethod}
	   ,W1_LECT_PLAN = #{w1LectPlan}
	   ,W2_LECT_PLAN = #{w2LectPlan}
	   ,W3_LECT_PLAN = #{w3LectPlan}
	   ,W4_LECT_PLAN = #{w4LectPlan}
	   ,W5_LECT_PLAN = #{w5LectPlan}
	   ,W6_LECT_PLAN = #{w6LectPlan}
	   ,W7_LECT_PLAN = #{w7LectPlan}
	   ,W8_LECT_PLAN = #{w8LectPlan}
	   ,W9_LECT_PLAN = #{w9LectPlan}
	   ,W10_LECT_PLAN = #{w10LectPlan}
	   ,W11_LECT_PLAN = #{w11LectPlan}
	   ,W12_LECT_PLAN = #{w12LectPlan}
	   ,W13_LECT_PLAN = #{w13LectPlan}
	   ,W14_LECT_PLAN = #{w14LectPlan}
	   ,W15_LECT_PLAN = #{w15LectPlan}
	   ,W16_LECT_PLAN = #{w16LectPlan}
	   ,MAIN_TXTB = #{mainTxtb}
	   ,SEC_TXTB = #{secTxtb}
	   ,MID_REFLECT_PER = #{midReflectPer}
	   ,FINAL_REFLECT_PER = #{finalReflectPer}
	   ,ATTEND_REFLECT_PER =#{attendReflectPer}
	   ,ASSIGN_RELECT_PER = #{assignRelectPer}
	   ,QUIZ_REFLECT_PER = #{quizReflectPer}
	   ,DEBATE_REFLECT_PER = #{debateReflectPer}
	   ,OTHER_REFLECT_PER = #{otherReflectPer}
	   ,OTHERTHINGS = #{otherthings}
	WHERE
		SYL_NUM = #{sylNum}
	    
	</update>
	
	<select id="searchLectName" parameterType="kr.or.ddit.professor.lecture.vo.SubjectVO" resultType="kr.or.ddit.professor.lecture.vo.SubjectVO">
	SELECT T.*
	FROM(
		SELECT
			ROW_NUMBER() OVER(ORDER BY TO_NUMBER(subj_num) DESC) RNUM,
		    FN_GET_UNIV_DEPT_NAME(UNIV_DEPT_NUM)  UNIV_DEPT_NAME,
		    UNIV_DEPT_NUM,
		    subj_num,
		    subj_name,
		    FN_GET_CODE_NAME('SUB_TYP',SUBJ_TYPE_CODE) SUBJ_TYPE_CODE_NAME,
            SUBJ_TYPE_CODE,
		    abol_yn,
		    rgst_date,
		    grdtn_requ_yn,
		    cred,
		    lect_time
		FROM
		    subject
	    WHERE 1 = 1
			<if test="searchKeyword !=''">  <!-- selectYear가 선택 -->
				AND subj_name LIKE '%' || #{searchKeyword} || '%'
			</if>
		AND ABOL_YN = 'N'
		AND UNIV_DEPT_NUM = #{univDeptNum}
		) T
		WHERE T.RNUM BETWEEN (#{pageNo} * 10 - 9) AND (#{pageNo} * 10)
	</select>
	
	
	<select id="searchLectCount" parameterType="kr.or.ddit.professor.lecture.vo.SubjectVO" resultType="int">
		SELECT
		    COUNT(*)
		FROM
		    SUBJECT
		WHERE 1 = 1
			<if test="searchKeyword !=''">  <!-- selectYear가 선택 -->
				AND subj_name LIKE '%' || #{searchKeyword} || '%'
			</if>
		AND ABOL_YN = 'N'
		AND UNIV_DEPT_NUM = #{univDeptNum}
		
	</select>
	
	<insert id="lectureOpenInsert" parameterType="kr.or.ddit.professor.lecture.vo.LectureOpenVO">
		INSERT INTO lecture_open (
		    prof_id,
		    subj_num,
		    lect_open_num,
		    lect_name,
		    sem_code,
		    cred,
		    room_idn_num,
		    syl_num,
		    subj_type_code,
		    year,
		    univ_dept_num,
		    divide_num,
		    max_std_cnt,
		    close_yn,
		    open_yn,
		    apply_date,
		    proc_stat_code,
		    auth_doc_num
		) VALUES (
		    #{profId},
		    #{subjNum},
		    (SELECT NVL(MAX(LECT_OPEN_NUM), TO_CHAR(SYSDATE, 'yyyyMM') || '00000') + 1 FROM	LECTURE_OPEN WHERE SUBSTR(LECT_OPEN_NUM, 1, 6) = TO_CHAR(SYSDATE, 'yyyyMM')),
		    #{lectName},
		    #{semCode},
		    #{cred},
		    #{roomIdnNum},
		    (SELECT NVL(MAX(TO_NUMBER(syl_num)), 0) FROM syllabus),
		    #{subjTypeCode},
		    #{year},
		    #{univDeptNum},
		    #{divideNum},
		    #{maxStdCnt},
		    'N',
		    'N',
		    sysdate,
		    '01',
		    #{authDocNum}
		)
	
	</insert>

	<insert id="syllabusInsert" parameterType="kr.or.ddit.professor.lecture.vo.LectureOpenVO">
		INSERT INTO syllabus (
		    syl_num
		) VALUES (
		    (SELECT NVL(MAX(TO_NUMBER(syl_num)), 0) + 1 FROM syllabus)
		)			
	</insert>
	
	<insert id="lectTimeInsert" parameterType="java.util.List">
		<foreach open="INSERT ALL" close="SELECT * FROM DUAL" collection="list" item="item" separator=" ">
		    INTO lecture_timetable (lect_open_num,day_code,period) VALUES ((SELECT MAX(TO_NUMBER(LECT_OPEN_NUM)) FROM	LECTURE_OPEN), #{item.dayCode}, #{item.period})
    	</foreach>
	</insert>
	
	
	
	<select id="selectLectOpenNum" parameterType="kr.or.ddit.professor.lecture.vo.LectureOpenVO" resultType="kr.or.ddit.professor.lecture.vo.LectureOpenVO">
		select LECT_OPEN_NUM from LECTURE_OPEN where PROF_ID = #{profId} and YEAR =#{year} and SEM_CODE=#{semCode}
	</select>

	<select id="selectScheduleList" parameterType="kr.or.ddit.professor.lecture.vo.LectureOpenVO" resultType="kr.or.ddit.professor.lecture.vo.LectureTimeVO">
		SELECT
		    A.lect_open_num,
		    FN_GET_CODE_NAME('DAY_COD',A.DAY_CODE) DAY_CODE,
		    A.period,
		    B.LECT_NAME
		FROM
		    lecture_timetable A, LECTURE_OPEN B 
		WHERE A.LECT_OPEN_NUM = B.LECT_OPEN_NUM    
		AND A.LECT_OPEN_NUM IN
		<foreach collection="list" item="item" index="index" separator="," open="(" close=")">
              #{item.lectOpenNum}
        </foreach>
		
	</select>
	
	
</mapper>